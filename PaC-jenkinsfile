node {
    def app
    def P0
    
   environment {
        guestbook = "${env.ns}"
    }
    
    stage('Startup Process') {
        sh 'rm -f -r -d *'
        sh 'rm -f -r -d .[!.]* ..?*'
    }

    stage('cloneRepository') {
        checkout scm
    }

	
    stage('Deploy Guestbook App') {
    withKubeConfig([credentialsId: 'k8s_config',
                    caCertificate: '',
                    serverUrl: '',
                    contextName: '',
                    clusterName: '',
                    namespace: ''
                    ]) {
            sh "kubectl create namespace ${env.ns} --dry-run -o yaml | kubectl apply -f -  && \
            kubectl apply -f redis-leader-deployment.yaml -n ${env.ns} && \
            kubectl apply -f redis-leader-service.yaml -n ${env.ns} && \
            kubectl apply -f redis-follower-deployment.yaml -n ${env.ns} && \
            kubectl apply -f redis-follower-service.yaml -n ${env.ns} && \
            kubectl apply -f frontend-deployment.yaml -n ${env.ns} && \
            kubectl apply -f frontend-service.yaml -n ${env.ns}"
        }
    }

    stage('Get Microsegmentation Creds') {
        withCredentials([file(credentialsId: 'pipeline.creds', variable: 'APOCTL_CREDS')]) {
            sh "cp \$APOCTL_CREDS $WORKSPACE/default.creds"
        }       
    }

    stage('Policy as Code: Create Ruleset for Guestbook App') {
        sh 'curl -o apoctl https://download.aporeto.com/prismacloud/app/apoctl/linux/apoctl'
        sh 'chmod +x apoctl'
        withEnv(["APOCTL_CREDS=$WORKSPACE/default.creds"]) {
	
		// Rules for guestbook app
            sh "./apoctl api import -n /${env.tenant}/${env.cloudAccount}/${env.group}/${env.ns} -f guestbook-ruleset.yaml \
                --set tenant=${env.tenant} --set cloudAccount=${env.cloudAccount} --set group=${env.group} --set ns=${env.ns}"
	
	    // Rules to allow DNS traffic to KubeDNS service needed to grant the proper work of the  app
            sh "./apoctl api import -n /${env.tenant}/${env.cloudAccount}/${env.group} -f dns-ruleset.yaml \
                --set tenant=${env.tenant} --set cloudAccount=${env.cloudAccount} --set group=${env.group}"	

     }
   }
    stage('Policy as Code: Reject not allowed traffic  for App') {
        // Once you configured the guestbook ruleset you can configure the default rule to reject all In/Out traffic for app namespace
      withEnv(["APOCTL_CREDS=$WORKSPACE/default.creds"]) {  
        sh "./apoctl api update namespace ${env.nsID} --namespace /${env.tenant}/${env.cloudAccount}/${env.group} -k  'defaultPUIncomingTrafficAction=Reject' "
        sh "./apoctl api update namespace ${env.nsID} --namespace /${env.tenant}/${env.cloudAccount}/${env.group} -k  'defaultPUOutgoingTrafficAction=Reject' "
        sh('chmod +x ./reject-traffic-guestbook.sh')
	P0 = sh(
        script: " ./apoctl api list namespace --recursive -f name==/${env.tenant}/${env.cloudAccount}/${env.group}/${env.ns} -c ID -o yaml | awk '{ print \$3}' ",
        returnStdout: true,
         )
	// sh "PO=\$(apoctl api list namespace --recursive -f name==/\${env.tenant}/\${env.cloudAccount}/\${env.group}/\${env.ns} -c ID -o yaml | awk '{ print $3}') "
	sh "echo app $P0"
	sh "echo namespace /${env.tenant}/${env.cloudAccount}/${env.group}"
        sh "./apoctl api update namespace ${P0} --namespace /${env.tenant}/${env.cloudAccount}/${env.group} -k 'defaultPUIncomingTrafficAction=Reject' "
        sh "./apoctl api update namespace ${P0} --namespace /${env.tenant}/${env.cloudAccount}/${env.group} -k 'defaultPUOutgoingTrafficAction=Reject' "
	
	 
   }
    }
   stage('Generate traffic') {

	sh('chmod +x ./entrypoint.sh')
        sh('chmod +x ./traffic-gen.sh && ./traffic-gen.sh')
    }
    
    stage('Finish Process') {
        sh 'rm -f -r -d *'
        sh 'rm -f -r -d .[!.]* ..?*'
    }
}
